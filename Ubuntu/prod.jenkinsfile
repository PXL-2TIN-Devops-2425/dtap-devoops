pipeline {
    agent any
    tools {
        dockerTool 'docker_tool'
    }
    environment {
        PROD_SERVER = '3.91.158.12' // Het IP-adres van de productie server
        DOCKER_IMAGE = '11502188/devoops:latest' // De laatste versie van je container op Docker Hub
        APP_PORT = '80' // Poort waarop de applicatie draait
    }
    stages {
        stage('Deploy prod') {
            steps {
                sshagent(['prodserverSSH']) {
                    sh '''
                    ssh -o StrictHostKeyChecking=no ubuntu@${PROD_SERVER} << EOF
                    # Zorg ervoor dat Docker geïnstalleerd is
                    if ! command -v docker &> /dev/null; then
                        echo "Docker is niet geïnstalleerd. Installeren..."
                        sudo apt update && sudo apt install -y docker.io
                    fi

                    # Download de nieuwste versie van de Docker container
                    docker pull ${DOCKER_IMAGE}
                    EOF
                    '''
                }
            }
        }
        stage('Cleanup prod') {
            steps {
                sshagent(['prodserverSSH']) {
                    sh '''
                    ssh -o StrictHostKeyChecking=no ubuntu@${PROD_SERVER} << EOF
                    # Verwijder oude containers en images
                    if docker ps -a --filter "name=prod_env" --format '{{.Names}}' | grep -q "^prod_env$"; then
                        docker rm -f prod_env
                    fi
                    if docker images -q ${DOCKER_IMAGE}; then
                        docker rmi -f ${DOCKER_IMAGE}
                    fi
                    EOF
                    '''
                }
            }
        }
        stage('Start prod') {
            steps {
                sshagent(['prodserverSSH']) {
                    sh '''
                    ssh -o StrictHostKeyChecking=no ubuntu@${PROD_SERVER} << EOF
                    # Start de container op poort 80
                    docker run -d -p ${APP_PORT}:3000 --restart always --name prod_env ${DOCKER_IMAGE}
                    EOF
                    '''
                }
            }
        }
        stage('Test prod') {
            steps {
                sshagent(['prodserverSSH']) {
                    script {
                        // Test of de applicatie beschikbaar is via curl en controleer op een statuscode 200
                        def response = sh(script: '''
                        ssh -o StrictHostKeyChecking=no ubuntu@${PROD_SERVER} "curl -o /dev/null -s -w '%{http_code}' http://localhost:${APP_PORT}"
                        ''', returnStdout: true).trim()

                        if (response != '200') {
                            error("De applicatie is niet beschikbaar! Statuscode: ${response}")
                        } else {
                            echo "De applicatie is succesvol gedeployed en beschikbaar. Statuscode: ${response}"
                        }
                    }
                }
            }
        }
    }
}