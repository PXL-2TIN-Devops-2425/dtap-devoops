pipeline {
    agent any
    tools {
        dockerTool "docker_tool"
    }
    stages {
        stage('connect to production') {
            steps {
                sshagent(['prodserverSSH']) {
                    sh 'ssh -o StrictHostKeyChecking=no -o ServerAliveInterval=10 ubuntu@3.91.158.12 ls -alh'
                }
            }
        }
        stage ('cleanup') {
            steps {
                sshagent(['prodserverSSH']) {
                    sh '''
                    ssh -o StrictHostKeyChecking=no ubuntu@3.91.158.12 "
                    # Cleanup Docker image if it exists
                    IMAGE_ID=$(docker images -q 11502188/devoops:testbuild)
                    if [ ! -z \\\"$IMAGE_ID\\\" ]; then
                        echo \\\"Removing Docker image 11502188/devoops:testbuild...\\\"
                        docker rmi -f 11502188/devoops:testbuild
                    else
                        echo \\\"Docker image 11502188/devoops:testbuild does not exist.\\\"
                    fi

                    # Cleanup Docker container if it exists
                    CONTAINER_ID=$(docker ps -a --filter \\\"name=test_container\\\" --format \\\"{{.ID}}\\\")
                    if [ ! -z \\\"$CONTAINER_ID\\\" ]; then
                        echo \\\"Removing container test_container...\\\"
                        docker rm -f test_container
                    else
                        echo \\\"No container named test_container found.\\\"
                    fi
                    "
                    '''
                }
            }
        }
        stage('deploy prod') {
            steps {
                sshagent(['prodserverSSH']) {
                    sh '''
                    ssh -o StrictHostKeyChecking=no ubuntu@3.91.158.12 "
                    # Pull the latest Docker image
                    echo \\\"Pulling Docker image 11502188/devoops:testbuild...\\\"
                    docker pull 11502188/devoops:testbuild

                    # Run the Docker container
                    echo \\\"Starting Docker container test_container...\\\"
                    docker run -d -p 80:3000 --restart always --name test_container 11502188/devoops:testbuild
                    "
                    '''
                }
            }
        }
        stage('test prod') {
            steps {
                sshagent(['prodserverSSH']) {
                    script {
                        def response = sh(script: '''
                        ssh -o StrictHostKeyChecking=no ubuntu@3.91.158.12 "curl -o /dev/null -s -w '%{http_code}' http://localhost:80"
                        ''', returnStdout: true).trim()

                        if (response != '200') {
                            error("Application is not available! Status code: ${response}")
                        } else {
                            echo "Application successfully deployed and accessible. Status code: ${response}"
                        }
                    }
                }
            }
        }
    }
}